#!/usr/bin/env python
### Name: slim-login
### Version: 2.1
### Depends: python, Gtk, xset
### Author: Dave (david@daveserver.info)
### Purpose: Configure SLiM autologin
### License: GPLv2

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, GLib
import os
import re
import sys
import gettext
gettext.install("slim-login", "/usr/share/locale")

class ErrorDlg:
    def __init__(self, parent, error):
        dlg = Gtk.MessageDialog(parent, 0,
           Gtk.MessageType.ERROR, Gtk.ButtonsType.OK, _("Error"))
        dlg.set_title("!")
        dlg.format_secondary_text(error)
        dlg.run()
        dlg.destroy()

class InfoDlg:
    def __init__(self, parent, infotext):
         dlg = Gtk.MessageDialog(parent, 0,
            Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "")
         dlg.set_title(".")
         dlg.format_secondary_text(infotext)
         dlg.run()
         dlg.destroy()

class mainWindow(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self)
        self.set_title(_("SLiM autologin configuration"))
        self.set_size_request(450,0)
        self.set_border_width(16)
        self.grid = Gtk.Grid(column_spacing=8,row_spacing=20)
        self.add(self.grid)
        self.sw_label = Gtk.Label(_("Enable SLiM Autologin"))
        self.grid.attach(self.sw_label, 1, 1, 1, 1)
        self.switch = Gtk.Switch()
        self.grid.attach(self.switch, 2, 1, 1, 1)
        self.usrname_label = Gtk.Label(_("choose Default User"))
        self.grid.attach(self.usrname_label, 1, 2, 1, 1)
        self.store = Gtk.ListStore(int,str)
        self.pickname_cbx =  Gtk.ComboBox.new_with_model_and_entry(self.store)
        self.pickname_cbx.set_entry_text_column(1)
        ### without this, user can override our lookuplist (and can type in 'root')
        self.pickname_cbx.get_children()[0].set_editable(False)
        self.grid.attach(self.pickname_cbx, 2, 2, 1, 1)
        buttonbox = Gtk.HButtonBox()
        buttonbox.set_border_width(10)
        self.grid.attach(buttonbox, 2, 3, 1, 1)
        close = Gtk.Button(stock=Gtk.STOCK_CLOSE)
        close.connect("clicked", lambda w: Gtk.main_quit())
        buttonbox.add(close)
        self.autostatus=0
        self.uname = ''
        self.show_all()
        lilist = [line for line in open("/etc/slim.conf", "r").read().splitlines() if line]
        for line in lilist:
            line = line.strip().lower()
            #####   consider: line may exist but have leading whitespace
            #####   Also, avoid potentially matching inline commentary, e.g.
            #####        ### Instead of outcommenting, if you simply omit the auto_login line
            #####        ### SLiM will assign an implicit auto_login value (which is "no")
            if line.startswith('auto_login') and len(line.split()) >= 2 and line.split()[1] == 'yes':
                self.autostatus=1
            elif line.startswith('default_user') \
                    and line.split()[1] and not line.split()[1].startswith('#'):
                self.uname = str(line.split()[1])
                ### shed any end-of-line inline comments (which SLiM parser allows/ignores)
                self.uname = str(self.uname.split('#')[0])

        if self.autostatus == 0:  self.switch.set_active(False)
        else:                     self.switch.set_active(True)
        ### account may have been deleted, or conf may have been copied from another system
        self.unamestillvalid = 0
        loop = 0
        for line in open('/etc/passwd', "r").xreadlines():
            if re.search(r'10[0-9][0-9]', line):
                pieces = line.split(':')
                if self.uname == str(pieces[0]) and not self.uname.lower() in \
                             ("console","halt","shutdown","reboot","exit"):
                    self.unamestillvalid = 1
                if not str(pieces[0]).lower() in ("console","halt","shutdown","reboot","exit"):
                    self.store.append([loop, pieces[0]])
                loop+=1
        ### At startup, the UI should accurately represent the current state per slim.conf
        ### When a default_user conf line (outcommented or not) is specified, and the
        ### specified user account still exists, pre-select that specified username.
        if self.uname != '' and self.unamestillvalid == 1:
            for itzarow in self.store:
                if self.uname == itzarow[1]:   ### lower()?
                    self.pickname_cbx.set_active(itzarow[0])
        ###      defer connect() until after we've applied the initial state
        self.switch.connect("notify::active", self.toggle_autologin)
        self.pickname_cbx.connect("changed", self.writeuser)

    def toggle_autologin(self, widget, squiggle):
        ###         skip SuccessDlg b/c the displayed switch/slider is self-evident
        ### don't disturb the default_user line
        ### (SLiM ignores it when the auto_login line is missing or its value is 'no')
        if self.switch.get_active() == True:  ##### WAS "off" until user clicked
            retvalue = os.system('sed -i "s/^\([ ]\)*\([#]\)*\([ ]\)*auto_login.*/auto_login  yes/g" /etc/slim.conf')
            if retvalue != 0:
                ErrorDlg(self, _("Error: could not turn off AutoLogin\n Please edit /etc/slim.conf manually"))
            else:
                self.autostatus = 0
        else:                                 ##### WAS "on" until user clicked
            retvalue = os.system('sed -i "s/^\([ ]\)*\([#]\)*\([ ]\)*auto_login.*$/auto_login  no/g" /etc/slim.conf')
            if retvalue != 0:
                ErrorDlg(self, _("Error: could not enable AutoLogin\n Please edit /etc/slim.conf manually"))
            else:
                self.autostatus = 1

    def writeuser(self, widget):
        tree_iter = self.pickname_cbx.get_active_iter()
        model = self.pickname_cbx.get_model()
        row_id, rowname = model[tree_iter][:2]
        if rowname.lower() in ("console","halt","shutdown","reboot","exit"):
            ErrorDlg(self, _("Error: could not set ") + rowname \
                 + _(" as default user.\n SLiM responds to this 'special username' as a command"))
            return
        if not os.path.isdir("/home/" + rowname):
            ErrorDlg(self, _("Could not set ") + rowname + _(" as default user") \
                 +".\n /home/" + rowname + _("/ directory does not exist.\n"))
            return
        cmdstring = "sed -i -e 's/^\([ ]\)*\([#]\)*\([ ]\)*default_user.*$/default_user  " \
                 + rowname + "/g' /etc/slim.conf"
        retvalue = os.system(cmdstring)
        if retvalue != 0:
            ErrorDlg(self, _("Error: could not set ") + rowname \
                 + _(" as default user.\n Please edit /etc/slim.conf manually"))
        else:
            InfoDlg(self, _("Success!\n\n Default User set to: ") + rowname + "\n")

if os.getuid() != 0:
    ErrorDlg(None, _("You MUST be sudo/root to use this application"))
    exit()

win = mainWindow()
win.connect("delete-event", Gtk.main_quit)
Gtk.main()
